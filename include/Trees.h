#ifndef TREES_H
#define TREES_H
#ifdef DARWIN
#include <GLFW/glfw3.h>
    #include <OpenGL/gl3.h>
#else
    #include <GL/glew.h>
    #include <GL/gl.h>
#endif
#include <QImage>
#include <QColor>
#include <glm/glm.hpp>
#include <Shader.h>
#include <ShaderProgram.h>
#include "Camera.h"
#include "Model.h"
#include "ShaderProgram.h"
#include "Texture.h"
class Trees
{
public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ctor
    //----------------------------------------------------------------------------------------------------------------------
    Trees(int _numTrees, QString _pathToHeightmap, glm::vec4 _lightPosition, glm::vec3 _lightIntensity);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief dtor
    //----------------------------------------------------------------------------------------------------------------------
    virtual ~Trees();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief initialise the trees
    //----------------------------------------------------------------------------------------------------------------------
    void initTrees(QString _pathToHeightmap);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief render the trees
    //----------------------------------------------------------------------------------------------------------------------
    void render();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief returns the positions of the trees x and y
    //----------------------------------------------------------------------------------------------------------------------
    inline std::vector<glm::vec2> getPositions(){return m_positions;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief returns the heights of the trees
    //----------------------------------------------------------------------------------------------------------------------
    float getHeight(int _width, int _depth, QImage _image);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief updates the trees positions when a new heightmap is loaded
    //----------------------------------------------------------------------------------------------------------------------
    void updateTrees(QString _pathToHeightmap);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief render a tree to a texture
    //----------------------------------------------------------------------------------------------------------------------
    void renderToTexture(glm::mat4 _modelMatrix, Camera *_cam);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief load matrices to shader
    //----------------------------------------------------------------------------------------------------------------------
    void loadMatricesToShader(glm::mat4 _modelMatrix, glm::mat4 _viewMatrix, glm::mat4 _projectionMatrix);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Creates the tree shader
    //----------------------------------------------------------------------------------------------------------------------
    void createShader(glm::vec4 _lightPosition, glm::vec3 _lightIntensity);
    //----------------------------------------------------------------------------------------------------------------------
private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Tree model data
    //----------------------------------------------------------------------------------------------------------------------
    Model *m_tree;
    //----------------------------------------------------------------------------------------------------------------------
    Model *m_leaves;
    //----------------------------------------------------------------------------------------------------------------------
    Model *m_billboard;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Number of trees to draw
    //----------------------------------------------------------------------------------------------------------------------
    int m_numTrees;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Height and width of terrain
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<glm::vec2> m_positions;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief billboard VAO handle
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_billVAO;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief framebuffer handle;
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_fboHandle;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Tree shader program
    //----------------------------------------------------------------------------------------------------------------------
    ShaderProgram *m_shaderProgram;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Tree shaders
    //----------------------------------------------------------------------------------------------------------------------
    Shader *m_vertShader;
    //----------------------------------------------------------------------------------------------------------------------
    Shader *m_fragShader;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Tree textures
    //----------------------------------------------------------------------------------------------------------------------
    Texture *m_barkTex;
    //----------------------------------------------------------------------------------------------------------------------
    Texture *m_leavesTex;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief isBark Uniform
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_isBarkLoc;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief isBillboard Uniform Loc
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_isBillboardLoc;
    //----------------------------------------------------------------------------------------------------------------------
};

#endif // TREES_H
