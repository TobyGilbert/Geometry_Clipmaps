#ifndef __SKYBOX_H_
#define __SKYBOX_H_

#include <glm/glm.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <string>

#include "ShaderProgram.h"
#include "Model.h"

class Skybox {
public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ctor
    //----------------------------------------------------------------------------------------------------------------------
    Skybox();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief dtor
    //----------------------------------------------------------------------------------------------------------------------
    ~Skybox();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Render function
    //----------------------------------------------------------------------------------------------------------------------
    void render();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Load the matrices to the shader
    //----------------------------------------------------------------------------------------------------------------------
    void loadMatricesToShader(glm::mat4 _modelMatrix, glm::mat4 _viewMatrix, glm::mat4 _projectionMatrix);
    //----------------------------------------------------------------------------------------------------------------------
private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Skybox model
    //----------------------------------------------------------------------------------------------------------------------
    Model *m_model;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Skybox shader program
    //----------------------------------------------------------------------------------------------------------------------
    ShaderProgram *m_shaderProgram;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Skybox vertex shader
    //----------------------------------------------------------------------------------------------------------------------
    Shader *m_vertShader;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Skybox fragment shader
    //----------------------------------------------------------------------------------------------------------------------
    Shader *m_fragShader;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Loads a cubemap into an active texture
    //----------------------------------------------------------------------------------------------------------------------
    GLuint loadCubeMap(std::string _pathToFile);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Create the skybox shader
    //----------------------------------------------------------------------------------------------------------------------
    void createShader();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Initialise the skybox
    //----------------------------------------------------------------------------------------------------------------------
    void initSkybox();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief update function
    void update();
    /// @brief texId
    GLuint m_texID;
};

#endif
